// noinspection JSUnusedGlobalSymbols,SpellCheckingInspection
// Code generated by define_gene; DO NOT EDIT.
declare module 'github.com/larksuite/oapi-sdk-go/v3/service/compensation/v1'{

	// @ts-ignore
	import * as context from 'golang/context'
	// @ts-ignore
	import * as larkcore from 'github.com/larksuite/oapi-sdk-go/v3/core'
	// @ts-ignore
	import type {bool,error,Ref,Struct,int} from 'go'
	export interface AdjustmentLogic extends Struct<AdjustmentLogic>{

			fixed:Ref<string>
			formula:Ref<Formula>
	}
	export interface AdjustmentLogicBuilder extends Struct<AdjustmentLogicBuilder>{

			fixed(fixed:string):Ref<AdjustmentLogicBuilder>
			formula(formula:Ref<Formula>):Ref<AdjustmentLogicBuilder>
			build():Ref<AdjustmentLogic>
	}
	export interface Archive extends Struct<Archive>{

			archiveId:Ref<string>
			archiveTid:Ref<string>
			userId:Ref<string>
			plan:Ref<Plan>
			effectiveDate:Ref<string>
	}
	export interface ArchiveBuilder extends Struct<ArchiveBuilder>{

			archiveId(archiveId:string):Ref<ArchiveBuilder>
			archiveTid(archiveTid:string):Ref<ArchiveBuilder>
			userId(userId:string):Ref<ArchiveBuilder>
			plan(plan:Ref<Plan>):Ref<ArchiveBuilder>
			effectiveDate(effectiveDate:string):Ref<ArchiveBuilder>
			build():Ref<Archive>
	}
	export interface ArchiveDetail extends Struct<ArchiveDetail>{

			userId:Ref<string>
			id:Ref<string>
			tid:Ref<string>
			planId:Ref<string>
			planTid:Ref<string>
			currencyId:Ref<string>
			changeReasonId:Ref<string>
			changeDescription:Ref<string>
			effectiveDate:Ref<string>
			salaryLevelId:Ref<string>
			archiveItems:Ref<ArchiveItem>[]
			archiveIndicators:Ref<ArchiveIndicator>[]
	}
	export interface ArchiveDetailBuilder extends Struct<ArchiveDetailBuilder>{

			userId(userId:string):Ref<ArchiveDetailBuilder>
			id(id:string):Ref<ArchiveDetailBuilder>
			tid(tid:string):Ref<ArchiveDetailBuilder>
			planId(planId:string):Ref<ArchiveDetailBuilder>
			planTid(planTid:string):Ref<ArchiveDetailBuilder>
			currencyId(currencyId:string):Ref<ArchiveDetailBuilder>
			changeReasonId(changeReasonId:string):Ref<ArchiveDetailBuilder>
			changeDescription(changeDescription:string):Ref<ArchiveDetailBuilder>
			effectiveDate(effectiveDate:string):Ref<ArchiveDetailBuilder>
			salaryLevelId(salaryLevelId:string):Ref<ArchiveDetailBuilder>
			archiveItems(archiveItems:Ref<ArchiveItem>[]):Ref<ArchiveDetailBuilder>
			archiveIndicators(archiveIndicators:Ref<ArchiveIndicator>[]):Ref<ArchiveDetailBuilder>
			build():Ref<ArchiveDetail>
	}
	export interface ArchiveIndicator extends Struct<ArchiveIndicator>{

			indicatorId:Ref<string>
			indicatorResult:Ref<string>
			indicatorResultRegular:Ref<string>
	}
	export interface ArchiveIndicatorBuilder extends Struct<ArchiveIndicatorBuilder>{

			indicatorId(indicatorId:string):Ref<ArchiveIndicatorBuilder>
			indicatorResult(indicatorResult:string):Ref<ArchiveIndicatorBuilder>
			indicatorResultRegular(indicatorResultRegular:string):Ref<ArchiveIndicatorBuilder>
			build():Ref<ArchiveIndicator>
	}
	export interface ArchiveItem extends Struct<ArchiveItem>{

			itemId:Ref<string>
			itemResult:Ref<string>
			itemResultRegular:Ref<string>
	}
	export interface ArchiveItemBuilder extends Struct<ArchiveItemBuilder>{

			itemId(itemId:string):Ref<ArchiveItemBuilder>
			itemResult(itemResult:string):Ref<ArchiveItemBuilder>
			itemResultRegular(itemResultRegular:string):Ref<ArchiveItemBuilder>
			build():Ref<ArchiveItem>
	}
	export interface ChangeReason extends Struct<ChangeReason>{

			id:Ref<string>
			name:Ref<string>
			note:Ref<string>
			activeStatus:Ref<int>
			i18nNames:Ref<I18nContent>[]
			i18nNotes:Ref<I18nContent>[]
	}
	export interface ChangeReasonBuilder extends Struct<ChangeReasonBuilder>{

			id(id:string):Ref<ChangeReasonBuilder>
			name(name:string):Ref<ChangeReasonBuilder>
			note(note:string):Ref<ChangeReasonBuilder>
			activeStatus(activeStatus:int):Ref<ChangeReasonBuilder>
			i18nNames(i18nNames:Ref<I18nContent>[]):Ref<ChangeReasonBuilder>
			i18nNotes(i18nNotes:Ref<I18nContent>[]):Ref<ChangeReasonBuilder>
			build():Ref<ChangeReason>
	}
	export interface DepartmentId extends Struct<DepartmentId>{

			departmentId:Ref<string>
			openDepartmentId:Ref<string>
	}
	export interface DepartmentIdBuilder extends Struct<DepartmentIdBuilder>{

			departmentId(departmentId:string):Ref<DepartmentIdBuilder>
			openDepartmentId(openDepartmentId:string):Ref<DepartmentIdBuilder>
			build():Ref<DepartmentId>
	}
	export interface Formula extends Struct<Formula>{

			expr:Ref<string>
			formulaParams:Ref<FormulaParam>[]
	}
	export interface FormulaBuilder extends Struct<FormulaBuilder>{

			expr(expr:string):Ref<FormulaBuilder>
			formulaParams(formulaParams:Ref<FormulaParam>[]):Ref<FormulaBuilder>
			build():Ref<Formula>
	}
	export interface FormulaParam extends Struct<FormulaParam>{

			refType:Ref<int>
			id:Ref<string>
	}
	export interface FormulaParamBuilder extends Struct<FormulaParamBuilder>{

			refType(refType:int):Ref<FormulaParamBuilder>
			id(id:string):Ref<FormulaParamBuilder>
			build():Ref<FormulaParam>
	}
	export interface I18n extends Struct<I18n>{

			zhCn:Ref<string>
			enUs:Ref<string>
	}
	export interface I18nBuilder extends Struct<I18nBuilder>{

			zhCn(zhCn:string):Ref<I18nBuilder>
			enUs(enUs:string):Ref<I18nBuilder>
			build():Ref<I18n>
	}
	export interface I18nContent extends Struct<I18nContent>{

			locale:Ref<string>
			value:Ref<string>
	}
	export interface I18nContentBuilder extends Struct<I18nContentBuilder>{

			locale(locale:string):Ref<I18nContentBuilder>
			value(value:string):Ref<I18nContentBuilder>
			build():Ref<I18nContent>
	}
	export interface Indicator extends Struct<Indicator>{

			id:Ref<string>
			name:Ref<string>
			valueType:Ref<string>
			activeStatus:Ref<int>
			i18nNames:Ref<I18nContent>[]
	}
	export interface IndicatorBuilder extends Struct<IndicatorBuilder>{

			id(id:string):Ref<IndicatorBuilder>
			name(name:string):Ref<IndicatorBuilder>
			valueType(valueType:string):Ref<IndicatorBuilder>
			activeStatus(activeStatus:int):Ref<IndicatorBuilder>
			i18nNames(i18nNames:Ref<I18nContent>[]):Ref<IndicatorBuilder>
			build():Ref<Indicator>
	}
	export interface Item extends Struct<Item>{

			id:Ref<string>
			name:Ref<string>
			description:Ref<string>
			categoryId:Ref<string>
			valueType:Ref<string>
			payOffFrequencyType:Ref<string>
			decimalPlaces:Ref<int>
			activeStatus:Ref<int>
			i18nNames:Ref<I18nContent>[]
			i18nDescriptions:Ref<I18nContent>[]
	}
	export interface ItemBuilder extends Struct<ItemBuilder>{

			id(id:string):Ref<ItemBuilder>
			name(name:string):Ref<ItemBuilder>
			description(description:string):Ref<ItemBuilder>
			categoryId(categoryId:string):Ref<ItemBuilder>
			valueType(valueType:string):Ref<ItemBuilder>
			payOffFrequencyType(payOffFrequencyType:string):Ref<ItemBuilder>
			decimalPlaces(decimalPlaces:int):Ref<ItemBuilder>
			activeStatus(activeStatus:int):Ref<ItemBuilder>
			i18nNames(i18nNames:Ref<I18nContent>[]):Ref<ItemBuilder>
			i18nDescriptions(i18nDescriptions:Ref<I18nContent>[]):Ref<ItemBuilder>
			build():Ref<Item>
	}
	export interface ItemCategory extends Struct<ItemCategory>{

			id:Ref<string>
			name:Ref<string>
			i18nNames:Ref<I18nContent>[]
	}
	export interface ItemCategoryBuilder extends Struct<ItemCategoryBuilder>{

			id(id:string):Ref<ItemCategoryBuilder>
			name(name:string):Ref<ItemCategoryBuilder>
			i18nNames(i18nNames:Ref<I18nContent>[]):Ref<ItemCategoryBuilder>
			build():Ref<ItemCategory>
	}
	export interface ListChangeReasonIterator extends Struct<ListChangeReasonIterator>{

			next():[bool,Ref<ChangeReason>]
			nextPageToken():Ref<string>
	}
	export interface ListChangeReasonReq extends Struct<ListChangeReasonReq>{

			limit:int
	}
	export interface ListChangeReasonReqBuilder extends Struct<ListChangeReasonReqBuilder>{

			limit(limit:int):Ref<ListChangeReasonReqBuilder>
			pageSize(pageSize:int):Ref<ListChangeReasonReqBuilder>
			pageToken(pageToken:string):Ref<ListChangeReasonReqBuilder>
			build():Ref<ListChangeReasonReq>
	}
	export interface ListChangeReasonResp extends Struct<ListChangeReasonResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListChangeReasonRespData>
			success():bool
	}
	export interface ListChangeReasonRespData extends Struct<ListChangeReasonRespData>{

			items:Ref<ChangeReason>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface ListIndicatorIterator extends Struct<ListIndicatorIterator>{

			next():[bool,Ref<Indicator>]
			nextPageToken():Ref<string>
	}
	export interface ListIndicatorReq extends Struct<ListIndicatorReq>{

			limit:int
	}
	export interface ListIndicatorReqBuilder extends Struct<ListIndicatorReqBuilder>{

			limit(limit:int):Ref<ListIndicatorReqBuilder>
			pageSize(pageSize:int):Ref<ListIndicatorReqBuilder>
			pageToken(pageToken:string):Ref<ListIndicatorReqBuilder>
			build():Ref<ListIndicatorReq>
	}
	export interface ListIndicatorResp extends Struct<ListIndicatorResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListIndicatorRespData>
			success():bool
	}
	export interface ListIndicatorRespData extends Struct<ListIndicatorRespData>{

			items:Ref<Indicator>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface ListItemCategoryIterator extends Struct<ListItemCategoryIterator>{

			next():[bool,Ref<ItemCategory>]
			nextPageToken():Ref<string>
	}
	export interface ListItemCategoryReq extends Struct<ListItemCategoryReq>{

			limit:int
	}
	export interface ListItemCategoryReqBuilder extends Struct<ListItemCategoryReqBuilder>{

			limit(limit:int):Ref<ListItemCategoryReqBuilder>
			pageSize(pageSize:int):Ref<ListItemCategoryReqBuilder>
			pageToken(pageToken:string):Ref<ListItemCategoryReqBuilder>
			build():Ref<ListItemCategoryReq>
	}
	export interface ListItemCategoryResp extends Struct<ListItemCategoryResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListItemCategoryRespData>
			success():bool
	}
	export interface ListItemCategoryRespData extends Struct<ListItemCategoryRespData>{

			items:Ref<ItemCategory>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface ListItemIterator extends Struct<ListItemIterator>{

			next():[bool,Ref<Item>]
			nextPageToken():Ref<string>
	}
	export interface ListItemReq extends Struct<ListItemReq>{

			limit:int
	}
	export interface ListItemReqBuilder extends Struct<ListItemReqBuilder>{

			limit(limit:int):Ref<ListItemReqBuilder>
			pageSize(pageSize:int):Ref<ListItemReqBuilder>
			pageToken(pageToken:string):Ref<ListItemReqBuilder>
			build():Ref<ListItemReq>
	}
	export interface ListItemResp extends Struct<ListItemResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListItemRespData>
			success():bool
	}
	export interface ListItemRespData extends Struct<ListItemRespData>{

			items:Ref<Item>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export interface ListPlanIterator extends Struct<ListPlanIterator>{

			next():[bool,Ref<PlanDetail>]
			nextPageToken():Ref<string>
	}
	export interface ListPlanReq extends Struct<ListPlanReq>{

			limit:int
	}
	export interface ListPlanReqBuilder extends Struct<ListPlanReqBuilder>{

			limit(limit:int):Ref<ListPlanReqBuilder>
			pageSize(pageSize:int):Ref<ListPlanReqBuilder>
			pageToken(pageToken:string):Ref<ListPlanReqBuilder>
			build():Ref<ListPlanReq>
	}
	export interface ListPlanResp extends Struct<ListPlanResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<ListPlanRespData>
			success():bool
	}
	export interface ListPlanRespData extends Struct<ListPlanRespData>{

			items:Ref<PlanDetail>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	export function New(config:Ref<larkcore.Config>):Ref<V1>

	export function newAdjustmentLogicBuilder():Ref<AdjustmentLogicBuilder>

	export function newArchiveBuilder():Ref<ArchiveBuilder>

	export function newArchiveDetailBuilder():Ref<ArchiveDetailBuilder>

	export function newArchiveIndicatorBuilder():Ref<ArchiveIndicatorBuilder>

	export function newArchiveItemBuilder():Ref<ArchiveItemBuilder>

	export function newChangeReasonBuilder():Ref<ChangeReasonBuilder>

	export function newDepartmentIdBuilder():Ref<DepartmentIdBuilder>

	export function newFormulaBuilder():Ref<FormulaBuilder>

	export function newFormulaParamBuilder():Ref<FormulaParamBuilder>

	export function newI18nBuilder():Ref<I18nBuilder>

	export function newI18nContentBuilder():Ref<I18nContentBuilder>

	export function newIndicatorBuilder():Ref<IndicatorBuilder>

	export function newItemBuilder():Ref<ItemBuilder>

	export function newItemCategoryBuilder():Ref<ItemCategoryBuilder>

	export function newListChangeReasonReqBuilder():Ref<ListChangeReasonReqBuilder>

	export function newListIndicatorReqBuilder():Ref<ListIndicatorReqBuilder>

	export function newListItemCategoryReqBuilder():Ref<ListItemCategoryReqBuilder>

	export function newListItemReqBuilder():Ref<ListItemReqBuilder>

	export function newListPlanReqBuilder():Ref<ListPlanReqBuilder>

	export function newPlanBuilder():Ref<PlanBuilder>

	export function newPlanConditionBuilder():Ref<PlanConditionBuilder>

	export function newPlanDetailBuilder():Ref<PlanDetailBuilder>

	export function newPlanIndicatorBuilder():Ref<PlanIndicatorBuilder>

	export function newPlanItemBuilder():Ref<PlanItemBuilder>

	export function newPlanScopeBuilder():Ref<PlanScopeBuilder>

	export function newQueryArchivePathReqBodyBuilder():Ref<QueryArchivePathReqBodyBuilder>

	export function newQueryArchiveReqBodyBuilder():Ref<QueryArchiveReqBodyBuilder>

	export function newQueryArchiveReqBuilder():Ref<QueryArchiveReqBuilder>

	export interface Plan extends Struct<Plan>{

			planId:Ref<string>
			planTid:Ref<string>
			name:Ref<I18n>
			peopleId:Ref<int>
	}
	export interface PlanBuilder extends Struct<PlanBuilder>{

			planId(planId:string):Ref<PlanBuilder>
			planTid(planTid:string):Ref<PlanBuilder>
			name(name:Ref<I18n>):Ref<PlanBuilder>
			peopleId(peopleId:int):Ref<PlanBuilder>
			build():Ref<Plan>
	}
	export interface PlanCondition extends Struct<PlanCondition>{

			leftType:Ref<int>
			operator:Ref<int>
			rightValue:string[]
	}
	export interface PlanConditionBuilder extends Struct<PlanConditionBuilder>{

			leftType(leftType:int):Ref<PlanConditionBuilder>
			operator(operator:int):Ref<PlanConditionBuilder>
			rightValue(rightValue:string[]):Ref<PlanConditionBuilder>
			build():Ref<PlanCondition>
	}
	export interface PlanDetail extends Struct<PlanDetail>{

			id:Ref<string>
			tid:Ref<string>
			name:Ref<string>
			description:Ref<string>
			effectiveDate:Ref<string>
			planScope:Ref<PlanScope>
			currencyId:Ref<string>
			probationSalaryStatus:Ref<bool>
			planItems:Ref<PlanItem>[]
			planIndicators:Ref<PlanIndicator>[]
			i18nNames:Ref<I18nContent>[]
			i18nDescriptions:Ref<I18nContent>[]
	}
	export interface PlanDetailBuilder extends Struct<PlanDetailBuilder>{

			id(id:string):Ref<PlanDetailBuilder>
			tid(tid:string):Ref<PlanDetailBuilder>
			name(name:string):Ref<PlanDetailBuilder>
			description(description:string):Ref<PlanDetailBuilder>
			effectiveDate(effectiveDate:string):Ref<PlanDetailBuilder>
			planScope(planScope:Ref<PlanScope>):Ref<PlanDetailBuilder>
			currencyId(currencyId:string):Ref<PlanDetailBuilder>
			probationSalaryStatus(probationSalaryStatus:bool):Ref<PlanDetailBuilder>
			planItems(planItems:Ref<PlanItem>[]):Ref<PlanDetailBuilder>
			planIndicators(planIndicators:Ref<PlanIndicator>[]):Ref<PlanDetailBuilder>
			i18nNames(i18nNames:Ref<I18nContent>[]):Ref<PlanDetailBuilder>
			i18nDescriptions(i18nDescriptions:Ref<I18nContent>[]):Ref<PlanDetailBuilder>
			build():Ref<PlanDetail>
	}
	export interface PlanIndicator extends Struct<PlanIndicator>{

			indicatorId:Ref<string>
			planIndicatorLogic:Ref<AdjustmentLogic>
	}
	export interface PlanIndicatorBuilder extends Struct<PlanIndicatorBuilder>{

			indicatorId(indicatorId:string):Ref<PlanIndicatorBuilder>
			planIndicatorLogic(planIndicatorLogic:Ref<AdjustmentLogic>):Ref<PlanIndicatorBuilder>
			build():Ref<PlanIndicator>
	}
	export interface PlanItem extends Struct<PlanItem>{

			adjustmentType:Ref<string>
			itemId:Ref<string>
			planItemLogic:Ref<AdjustmentLogic>
			probationDiscountType:Ref<string>
			probationDiscountPercentum:Ref<string>
	}
	export interface PlanItemBuilder extends Struct<PlanItemBuilder>{

			adjustmentType(adjustmentType:string):Ref<PlanItemBuilder>
			itemId(itemId:string):Ref<PlanItemBuilder>
			planItemLogic(planItemLogic:Ref<AdjustmentLogic>):Ref<PlanItemBuilder>
			probationDiscountType(probationDiscountType:string):Ref<PlanItemBuilder>
			probationDiscountPercentum(probationDiscountPercentum:string):Ref<PlanItemBuilder>
			build():Ref<PlanItem>
	}
	export interface PlanScope extends Struct<PlanScope>{

			isAll:Ref<bool>
			planConditions:Ref<PlanCondition>[]
	}
	export interface PlanScopeBuilder extends Struct<PlanScopeBuilder>{

			isAll(isAll:bool):Ref<PlanScopeBuilder>
			planConditions(planConditions:Ref<PlanCondition>[]):Ref<PlanScopeBuilder>
			build():Ref<PlanScope>
	}
	export interface QueryArchivePathReqBodyBuilder extends Struct<QueryArchivePathReqBodyBuilder>{

			userIdList(userIdList:string[]):Ref<QueryArchivePathReqBodyBuilder>
			effectiveStartDate(effectiveStartDate:string):Ref<QueryArchivePathReqBodyBuilder>
			effectiveEndDate(effectiveEndDate:string):Ref<QueryArchivePathReqBodyBuilder>
			build():Ref<QueryArchiveReqBody>
	}
	export interface QueryArchiveReq extends Struct<QueryArchiveReq>{

			body:Ref<QueryArchiveReqBody>
	}
	export interface QueryArchiveReqBody extends Struct<QueryArchiveReqBody>{

			userIdList:string[]
			effectiveStartDate:Ref<string>
			effectiveEndDate:Ref<string>
	}
	export interface QueryArchiveReqBodyBuilder extends Struct<QueryArchiveReqBodyBuilder>{

			userIdList(userIdList:string[]):Ref<QueryArchiveReqBodyBuilder>
			effectiveStartDate(effectiveStartDate:string):Ref<QueryArchiveReqBodyBuilder>
			effectiveEndDate(effectiveEndDate:string):Ref<QueryArchiveReqBodyBuilder>
			build():Ref<QueryArchiveReqBody>
	}
	export interface QueryArchiveReqBuilder extends Struct<QueryArchiveReqBuilder>{

			pageSize(pageSize:int):Ref<QueryArchiveReqBuilder>
			pageToken(pageToken:string):Ref<QueryArchiveReqBuilder>
			userIdType(userIdType:string):Ref<QueryArchiveReqBuilder>
			body(body:Ref<QueryArchiveReqBody>):Ref<QueryArchiveReqBuilder>
			build():Ref<QueryArchiveReq>
	}
	export interface QueryArchiveResp extends Struct<QueryArchiveResp>{

			apiResp:Ref<larkcore.ApiResp>
			codeError:larkcore.CodeError
			data:Ref<QueryArchiveRespData>
			success():bool
	}
	export interface QueryArchiveRespData extends Struct<QueryArchiveRespData>{

			items:Ref<ArchiveDetail>[]
			pageToken:Ref<string>
			hasMore:Ref<bool>
	}
	//"open_id"
	export const UserIDTypeOpenId:string
	//"union_id"
	export const UserIDTypeUnionId:string
	//"user_id"
	export const UserIDTypeUserId:string
	export interface V1 extends Struct<V1>{

			archive:Ref<{
			
				query(ctx:context.Context,req:Ref<QueryArchiveReq>,...options:larkcore.RequestOptionFunc[]):Ref<QueryArchiveResp>
			}>
			changeReason:Ref<{
			
				list(ctx:context.Context,req:Ref<ListChangeReasonReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListChangeReasonResp>
				listByIterator(ctx:context.Context,req:Ref<ListChangeReasonReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListChangeReasonIterator>
			}>
			indicator:Ref<{
			
				list(ctx:context.Context,req:Ref<ListIndicatorReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListIndicatorResp>
				listByIterator(ctx:context.Context,req:Ref<ListIndicatorReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListIndicatorIterator>
			}>
			item:Ref<{
			
				list(ctx:context.Context,req:Ref<ListItemReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListItemResp>
				listByIterator(ctx:context.Context,req:Ref<ListItemReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListItemIterator>
			}>
			itemCategory:Ref<{
			
				list(ctx:context.Context,req:Ref<ListItemCategoryReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListItemCategoryResp>
				listByIterator(ctx:context.Context,req:Ref<ListItemCategoryReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListItemCategoryIterator>
			}>
			plan:Ref<{
			
				list(ctx:context.Context,req:Ref<ListPlanReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListPlanResp>
				listByIterator(ctx:context.Context,req:Ref<ListPlanReq>,...options:larkcore.RequestOptionFunc[]):Ref<ListPlanIterator>
			}>
	}
	export function emptyPlan():Plan
	export function emptyRefPlan():Ref<Plan>
	export function refOfPlan(x:Plan,v:Ref<Plan>)
	export function unRefPlan(v:Ref<Plan>):Plan
	export function emptyListItemCategoryReq():ListItemCategoryReq
	export function emptyRefListItemCategoryReq():Ref<ListItemCategoryReq>
	export function refOfListItemCategoryReq(x:ListItemCategoryReq,v:Ref<ListItemCategoryReq>)
	export function unRefListItemCategoryReq(v:Ref<ListItemCategoryReq>):ListItemCategoryReq
	export function emptyListPlanIterator():ListPlanIterator
	export function emptyRefListPlanIterator():Ref<ListPlanIterator>
	export function refOfListPlanIterator(x:ListPlanIterator,v:Ref<ListPlanIterator>)
	export function unRefListPlanIterator(v:Ref<ListPlanIterator>):ListPlanIterator
	export function emptyListPlanResp():ListPlanResp
	export function emptyRefListPlanResp():Ref<ListPlanResp>
	export function refOfListPlanResp(x:ListPlanResp,v:Ref<ListPlanResp>)
	export function unRefListPlanResp(v:Ref<ListPlanResp>):ListPlanResp
	export function emptyV1():V1
	export function emptyRefV1():Ref<V1>
	export function refOfV1(x:V1,v:Ref<V1>)
	export function unRefV1(v:Ref<V1>):V1
	export function emptyFormula():Formula
	export function emptyRefFormula():Ref<Formula>
	export function refOfFormula(x:Formula,v:Ref<Formula>)
	export function unRefFormula(v:Ref<Formula>):Formula
	export function emptyListChangeReasonIterator():ListChangeReasonIterator
	export function emptyRefListChangeReasonIterator():Ref<ListChangeReasonIterator>
	export function refOfListChangeReasonIterator(x:ListChangeReasonIterator,v:Ref<ListChangeReasonIterator>)
	export function unRefListChangeReasonIterator(v:Ref<ListChangeReasonIterator>):ListChangeReasonIterator
	export function emptyListItemCategoryRespData():ListItemCategoryRespData
	export function emptyRefListItemCategoryRespData():Ref<ListItemCategoryRespData>
	export function refOfListItemCategoryRespData(x:ListItemCategoryRespData,v:Ref<ListItemCategoryRespData>)
	export function unRefListItemCategoryRespData(v:Ref<ListItemCategoryRespData>):ListItemCategoryRespData
	export function emptyPlanCondition():PlanCondition
	export function emptyRefPlanCondition():Ref<PlanCondition>
	export function refOfPlanCondition(x:PlanCondition,v:Ref<PlanCondition>)
	export function unRefPlanCondition(v:Ref<PlanCondition>):PlanCondition
	export function emptyListChangeReasonRespData():ListChangeReasonRespData
	export function emptyRefListChangeReasonRespData():Ref<ListChangeReasonRespData>
	export function refOfListChangeReasonRespData(x:ListChangeReasonRespData,v:Ref<ListChangeReasonRespData>)
	export function unRefListChangeReasonRespData(v:Ref<ListChangeReasonRespData>):ListChangeReasonRespData
	export function emptyQueryArchiveReqBody():QueryArchiveReqBody
	export function emptyRefQueryArchiveReqBody():Ref<QueryArchiveReqBody>
	export function refOfQueryArchiveReqBody(x:QueryArchiveReqBody,v:Ref<QueryArchiveReqBody>)
	export function unRefQueryArchiveReqBody(v:Ref<QueryArchiveReqBody>):QueryArchiveReqBody
	export function emptyArchiveItem():ArchiveItem
	export function emptyRefArchiveItem():Ref<ArchiveItem>
	export function refOfArchiveItem(x:ArchiveItem,v:Ref<ArchiveItem>)
	export function unRefArchiveItem(v:Ref<ArchiveItem>):ArchiveItem
	export function emptyI18nContent():I18nContent
	export function emptyRefI18nContent():Ref<I18nContent>
	export function refOfI18nContent(x:I18nContent,v:Ref<I18nContent>)
	export function unRefI18nContent(v:Ref<I18nContent>):I18nContent
	export function emptyListChangeReasonResp():ListChangeReasonResp
	export function emptyRefListChangeReasonResp():Ref<ListChangeReasonResp>
	export function refOfListChangeReasonResp(x:ListChangeReasonResp,v:Ref<ListChangeReasonResp>)
	export function unRefListChangeReasonResp(v:Ref<ListChangeReasonResp>):ListChangeReasonResp
	export function emptyListIndicatorIterator():ListIndicatorIterator
	export function emptyRefListIndicatorIterator():Ref<ListIndicatorIterator>
	export function refOfListIndicatorIterator(x:ListIndicatorIterator,v:Ref<ListIndicatorIterator>)
	export function unRefListIndicatorIterator(v:Ref<ListIndicatorIterator>):ListIndicatorIterator
	export function emptyQueryArchiveRespData():QueryArchiveRespData
	export function emptyRefQueryArchiveRespData():Ref<QueryArchiveRespData>
	export function refOfQueryArchiveRespData(x:QueryArchiveRespData,v:Ref<QueryArchiveRespData>)
	export function unRefQueryArchiveRespData(v:Ref<QueryArchiveRespData>):QueryArchiveRespData
	export function emptyArchiveDetail():ArchiveDetail
	export function emptyRefArchiveDetail():Ref<ArchiveDetail>
	export function refOfArchiveDetail(x:ArchiveDetail,v:Ref<ArchiveDetail>)
	export function unRefArchiveDetail(v:Ref<ArchiveDetail>):ArchiveDetail
	export function emptyListPlanReq():ListPlanReq
	export function emptyRefListPlanReq():Ref<ListPlanReq>
	export function refOfListPlanReq(x:ListPlanReq,v:Ref<ListPlanReq>)
	export function unRefListPlanReq(v:Ref<ListPlanReq>):ListPlanReq
	export function emptyFormulaParam():FormulaParam
	export function emptyRefFormulaParam():Ref<FormulaParam>
	export function refOfFormulaParam(x:FormulaParam,v:Ref<FormulaParam>)
	export function unRefFormulaParam(v:Ref<FormulaParam>):FormulaParam
	export function emptyListChangeReasonReq():ListChangeReasonReq
	export function emptyRefListChangeReasonReq():Ref<ListChangeReasonReq>
	export function refOfListChangeReasonReq(x:ListChangeReasonReq,v:Ref<ListChangeReasonReq>)
	export function unRefListChangeReasonReq(v:Ref<ListChangeReasonReq>):ListChangeReasonReq
	export function emptyListIndicatorReq():ListIndicatorReq
	export function emptyRefListIndicatorReq():Ref<ListIndicatorReq>
	export function refOfListIndicatorReq(x:ListIndicatorReq,v:Ref<ListIndicatorReq>)
	export function unRefListIndicatorReq(v:Ref<ListIndicatorReq>):ListIndicatorReq
	export function emptyArchive():Archive
	export function emptyRefArchive():Ref<Archive>
	export function refOfArchive(x:Archive,v:Ref<Archive>)
	export function unRefArchive(v:Ref<Archive>):Archive
	export function emptyQueryArchiveResp():QueryArchiveResp
	export function emptyRefQueryArchiveResp():Ref<QueryArchiveResp>
	export function refOfQueryArchiveResp(x:QueryArchiveResp,v:Ref<QueryArchiveResp>)
	export function unRefQueryArchiveResp(v:Ref<QueryArchiveResp>):QueryArchiveResp
	export function emptyItem():Item
	export function emptyRefItem():Ref<Item>
	export function refOfItem(x:Item,v:Ref<Item>)
	export function unRefItem(v:Ref<Item>):Item
	export function emptyListItemResp():ListItemResp
	export function emptyRefListItemResp():Ref<ListItemResp>
	export function refOfListItemResp(x:ListItemResp,v:Ref<ListItemResp>)
	export function unRefListItemResp(v:Ref<ListItemResp>):ListItemResp
	export function emptyListItemCategoryResp():ListItemCategoryResp
	export function emptyRefListItemCategoryResp():Ref<ListItemCategoryResp>
	export function refOfListItemCategoryResp(x:ListItemCategoryResp,v:Ref<ListItemCategoryResp>)
	export function unRefListItemCategoryResp(v:Ref<ListItemCategoryResp>):ListItemCategoryResp
	export function emptyPlanIndicator():PlanIndicator
	export function emptyRefPlanIndicator():Ref<PlanIndicator>
	export function refOfPlanIndicator(x:PlanIndicator,v:Ref<PlanIndicator>)
	export function unRefPlanIndicator(v:Ref<PlanIndicator>):PlanIndicator
	export function emptyPlanDetail():PlanDetail
	export function emptyRefPlanDetail():Ref<PlanDetail>
	export function refOfPlanDetail(x:PlanDetail,v:Ref<PlanDetail>)
	export function unRefPlanDetail(v:Ref<PlanDetail>):PlanDetail
	export function emptyPlanItem():PlanItem
	export function emptyRefPlanItem():Ref<PlanItem>
	export function refOfPlanItem(x:PlanItem,v:Ref<PlanItem>)
	export function unRefPlanItem(v:Ref<PlanItem>):PlanItem
	export function emptyDepartmentId():DepartmentId
	export function emptyRefDepartmentId():Ref<DepartmentId>
	export function refOfDepartmentId(x:DepartmentId,v:Ref<DepartmentId>)
	export function unRefDepartmentId(v:Ref<DepartmentId>):DepartmentId
	export function emptyListItemRespData():ListItemRespData
	export function emptyRefListItemRespData():Ref<ListItemRespData>
	export function refOfListItemRespData(x:ListItemRespData,v:Ref<ListItemRespData>)
	export function unRefListItemRespData(v:Ref<ListItemRespData>):ListItemRespData
	export function emptyI18n():I18n
	export function emptyRefI18n():Ref<I18n>
	export function refOfI18n(x:I18n,v:Ref<I18n>)
	export function unRefI18n(v:Ref<I18n>):I18n
	export function emptyIndicator():Indicator
	export function emptyRefIndicator():Ref<Indicator>
	export function refOfIndicator(x:Indicator,v:Ref<Indicator>)
	export function unRefIndicator(v:Ref<Indicator>):Indicator
	export function emptyListItemIterator():ListItemIterator
	export function emptyRefListItemIterator():Ref<ListItemIterator>
	export function refOfListItemIterator(x:ListItemIterator,v:Ref<ListItemIterator>)
	export function unRefListItemIterator(v:Ref<ListItemIterator>):ListItemIterator
	export function emptyPlanScope():PlanScope
	export function emptyRefPlanScope():Ref<PlanScope>
	export function refOfPlanScope(x:PlanScope,v:Ref<PlanScope>)
	export function unRefPlanScope(v:Ref<PlanScope>):PlanScope
	export function emptyAdjustmentLogic():AdjustmentLogic
	export function emptyRefAdjustmentLogic():Ref<AdjustmentLogic>
	export function refOfAdjustmentLogic(x:AdjustmentLogic,v:Ref<AdjustmentLogic>)
	export function unRefAdjustmentLogic(v:Ref<AdjustmentLogic>):AdjustmentLogic
	export function emptyArchiveIndicator():ArchiveIndicator
	export function emptyRefArchiveIndicator():Ref<ArchiveIndicator>
	export function refOfArchiveIndicator(x:ArchiveIndicator,v:Ref<ArchiveIndicator>)
	export function unRefArchiveIndicator(v:Ref<ArchiveIndicator>):ArchiveIndicator
	export function emptyListPlanRespData():ListPlanRespData
	export function emptyRefListPlanRespData():Ref<ListPlanRespData>
	export function refOfListPlanRespData(x:ListPlanRespData,v:Ref<ListPlanRespData>)
	export function unRefListPlanRespData(v:Ref<ListPlanRespData>):ListPlanRespData
	export function emptyQueryArchiveReq():QueryArchiveReq
	export function emptyRefQueryArchiveReq():Ref<QueryArchiveReq>
	export function refOfQueryArchiveReq(x:QueryArchiveReq,v:Ref<QueryArchiveReq>)
	export function unRefQueryArchiveReq(v:Ref<QueryArchiveReq>):QueryArchiveReq
	export function emptyListIndicatorResp():ListIndicatorResp
	export function emptyRefListIndicatorResp():Ref<ListIndicatorResp>
	export function refOfListIndicatorResp(x:ListIndicatorResp,v:Ref<ListIndicatorResp>)
	export function unRefListIndicatorResp(v:Ref<ListIndicatorResp>):ListIndicatorResp
	export function emptyListIndicatorRespData():ListIndicatorRespData
	export function emptyRefListIndicatorRespData():Ref<ListIndicatorRespData>
	export function refOfListIndicatorRespData(x:ListIndicatorRespData,v:Ref<ListIndicatorRespData>)
	export function unRefListIndicatorRespData(v:Ref<ListIndicatorRespData>):ListIndicatorRespData
	export function emptyListItemCategoryIterator():ListItemCategoryIterator
	export function emptyRefListItemCategoryIterator():Ref<ListItemCategoryIterator>
	export function refOfListItemCategoryIterator(x:ListItemCategoryIterator,v:Ref<ListItemCategoryIterator>)
	export function unRefListItemCategoryIterator(v:Ref<ListItemCategoryIterator>):ListItemCategoryIterator
	export function emptyListItemReq():ListItemReq
	export function emptyRefListItemReq():Ref<ListItemReq>
	export function refOfListItemReq(x:ListItemReq,v:Ref<ListItemReq>)
	export function unRefListItemReq(v:Ref<ListItemReq>):ListItemReq
	export function emptyChangeReason():ChangeReason
	export function emptyRefChangeReason():Ref<ChangeReason>
	export function refOfChangeReason(x:ChangeReason,v:Ref<ChangeReason>)
	export function unRefChangeReason(v:Ref<ChangeReason>):ChangeReason
	export function emptyItemCategory():ItemCategory
	export function emptyRefItemCategory():Ref<ItemCategory>
	export function refOfItemCategory(x:ItemCategory,v:Ref<ItemCategory>)
	export function unRefItemCategory(v:Ref<ItemCategory>):ItemCategory
}